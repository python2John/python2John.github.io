<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xYx</title>
  
  <subtitle>依然自我</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-24T02:13:15.838Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xyx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/10/20/table/"/>
    <id>http://yoursite.com/2019/10/20/table/</id>
    <published>2019-10-20T04:46:38.428Z</published>
    <updated>2019-09-24T02:13:15.838Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0"><meta charset="utf-8"><title></title><style type="text/css">div>:first-child{display: inline;min-width: 80px;float: left;}div>:first-child:before {content: counter(mycounter,disc);}div {margin-bottom: 8px;}</style></head><body><form action="https://www.baidu.com/s" method="get" target="_blank"><div><label>查询关键字：</label><input type="text" name="wd"></div><input type="hidden" name="ie" value="UTF-8"><input type="submit" value="查询"></form><form action="https://hooks.zapier.com/hooks/catch/3734059/ooekw5w/" method="post" id="myform" enctype="multipart/form-data"><div><label>用户名:</label><input type="text" id="username" name="username" placeholder="用户名"></div><div><lable>密码:</lable><input type="password" name="password" placeholder="密码"></div><div><label>性别：</label><input type="radio" name="sex" id="sex1" value="0" checked="checked"><label for="sex1">男</label><input type="radio" name="sex" id="sex2" value="1"><label for="sex2">女</label></div><div><label>兴趣：</label><input type="checkbox" name="like" id="like1" value="java" checked="checked"><label for="like1">JAVA</label><input type="checkbox" name="like" id="like2" value="cs"><label for="like2">C#</label><input type="checkbox" name="like" id="like3" value="others"><label for="like3">其他</label></div><div><label>省份：</label><select name="provinces"><option value="0">北京</option><option value="1">上海</option><option value="2">广州</option><option value="3" selected="selected">湖南</option><option value="4">河北</option></select></div><div><label>自我介绍：</label><textarea rows="10" style="width: 100%;"></textarea></div><div><label>头像：</label><input type="file" name="phone" id="phone"></div><input type="hidden" name="token" value="ashddadsa1213=="><fieldset id><legend>按钮测试区域</legend><input type="button" name="reg" id="reg" value="注册" onclick="window.location = 'https://reg.taobao.com/member/reg/fill_mobile.htm'"><input type="button" value="提交" onclick="document.getElementById('myform').submit();"><input type="button" value="提交" onclick="form.submit();"><input type="submit" value="提交"><input type="reset" value="重置"><input type="image" src="素材/submit.png" width="80px" style="text-align: center;"></fieldset></form></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.9.0&quot;&gt;
		&lt;meta charset=&quot;utf-8&quot;&gt;
		&lt;title&gt;&lt;/title&gt;
		&lt;style type=&quot;text/cs
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>测试！！！</title>
    <link href="http://yoursite.com/2019/10/20/menu/"/>
    <id>http://yoursite.com/2019/10/20/menu/</id>
    <published>2019-10-20T04:41:52.160Z</published>
    <updated>2019-10-20T05:03:59.935Z</updated>
    
    <content type="html"><![CDATA[<p><button id="test" onclick="jump()">点击我</button></p><script>function jump(){ window.location.href="../table/index.html";}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;button id=&quot;test&quot; onclick=&quot;jump()&quot;&gt;点击我&lt;/button&gt;&lt;/p&gt;
&lt;script&gt;
function jump(){
 window.location.href=&quot;../table/index.html&quot;;
}
&lt;/script&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Windows 自带计算器的使用</title>
    <link href="http://yoursite.com/2019/10/10/Windows-operation/Windows%20%E8%87%AA%E5%B8%A6%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/10/Windows-operation/Windows 自带计算器的使用/</id>
    <published>2019-10-10T05:38:01.736Z</published>
    <updated>2019-10-10T13:52:45.078Z</updated>
    
    <content type="html"><![CDATA[<p>​    <a id="more"></a></p><p>计算器的使用，还值得写一些吗。。</p><p>首先，需要打开计算器先，<code>Win + R</code>打开运行窗口，输入<code>calc</code>后回车便可打开计算器</p><hr><ul><li>计算器有<strong>复制粘贴</strong>的功能，不过复制的算式不能有中文括号，否则会提示<u>无效输入</u>。但是数字或空格无论是在英文输入状态下还是中文输入状态下都是可以的，同时空格也允许有多个</li></ul><p><img src="https://user-images.githubusercontent.com/43738074/66468583-fd88e500-eab8-11e9-82ec-dc04f79ce9b8.png" alt="计算器说明"></p><ul><li>当计算器放大到一定程度或最大化时，历史记录不用点击都会自动出现 </li><li>标准型的计算器，是按照从左到右的方式计算的</li><li>科学型的计算器是按照运算符优先级来计算的</li></ul><p><img src="https://user-images.githubusercontent.com/43738074/66468582-fcf04e80-eab8-11e9-88ff-510520b3fe00.PNG" alt="计算器历史记录"></p><ul><li>程序员型计算器，如下：</li></ul><p><img src="https://user-images.githubusercontent.com/43738074/66468584-fd88e500-eab8-11e9-824a-787cc8096175.PNG" alt="计算器程序员"></p><p>可见：</p><ol><li>输入键盘有两种方式：全键盘（左）和比特绷板键盘（右），不过这里的话，还是复制粘贴好用点</li><li>这里的二进制数，都是<strong>有符号</strong>的</li><li><strong>BYTE ，WORD，DWORD，QWORD</strong> 分别表示二进制数占用的位数为 8、16、32、64位</li></ol><p><span style="color:red">注意相同的输入，比如11010110 10000111，在WORD和DWORD下运算是不同的！因为如果是DWORD，则是00000000 00000000 11010110 10000111，即是正数，而WORD下为负数</span></p><p>因此计算二进制的时候一定要选择好范围。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​
    
    </summary>
    
    
      <category term="电脑技巧" scheme="http://yoursite.com/categories/%E7%94%B5%E8%84%91%E6%8A%80%E5%B7%A7/"/>
    
      <category term="软件" scheme="http://yoursite.com/categories/%E7%94%B5%E8%84%91%E6%8A%80%E5%B7%A7/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Python 编写简易2048游戏</title>
    <link href="http://yoursite.com/2019/10/10/python/Python%20%E7%BC%96%E5%86%99%E7%AE%80%E6%98%932048%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2019/10/10/python/Python 编写简易2048游戏/</id>
    <published>2019-10-10T05:38:01.728Z</published>
    <updated>2019-10-10T13:54:21.378Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个很简陋的2048游戏设计<a id="more"></a>，先看下在 PyCharm 控制台输出的效果先：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">请输入2048游戏界面的大小：3</span><br><span class="line">[0, 0, 0]</span><br><span class="line">[0, 0, 0]</span><br><span class="line">[0, 2, 0]</span><br><span class="line">(w/W)上，(s/S)下，(a/A)左，(d/D)右，(r/R)重置游戏大小，(q/Q)退出：a</span><br><span class="line">[0, 0, 0]</span><br><span class="line">[0, 0, 0]</span><br><span class="line">[2, 0, 4]</span><br><span class="line">(w/W)上，(s/S)下，(a/A)左，(d/D)右，(r/R)重置游戏大小，(q/Q)退出：d</span><br><span class="line">[2, 0, 0]</span><br><span class="line">[0, 0, 0]</span><br><span class="line">[0, 2, 4]</span><br><span class="line">(w/W)上，(s/S)下，(a/A)左，(d/D)右，(r/R)重置游戏大小，(q/Q)退出：s</span><br><span class="line">[2, 0, 0]</span><br><span class="line">[0, 0, 0]</span><br><span class="line">[2, 2, 4]</span><br><span class="line">(w/W)上，(s/S)下，(a/A)左，(d/D)右，(r/R)重置游戏大小，(q/Q)退出：d</span><br><span class="line">[0, 0, 2]</span><br><span class="line">[0, 0, 0]</span><br><span class="line">[2, 0, 8]</span><br><span class="line">(w/W)上，(s/S)下，(a/A)左，(d/D)右，(r/R)重置游戏大小，(q/Q)退出：q</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>其中类似 [0, 2, 2, 2] 这样的数组，“向右滑动”后为  [0, 0, 4, 2]，而不是  [0, 0, 2, 4]，没去查究竟哪种才是真正的结果，不过这两种的实现效果，代码思想都是一样，就这样吧</p><p><strong>设计思路</strong>：</p><p>2048 游戏界面可由一个二维数组来表示。当左右滑动的动作作用在整个二维数组上，可以采用化整为零的思想，把一个二维数组按情况分解为一列列的一维数组或者一行行的一维数组，进而遍历这些一维数组，实现一维数组上的左右滑动，从而实现二维数组的左右滑动操作。</p><p><strong>代码实现解析</strong>：</p><p>首先定义一个初始数组，表示游戏界面的范围大小</p><ul><li><code>[[0 for i in range(size)] for j in range(size)]</code>表示行列数都为 size ，值都为 0 的二维数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_array</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    生成 2048 游戏界面，界面的长宽为输入值的大小</span></span><br><span class="line"><span class="string">    :return: 全部值为0 的二维数组</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        size = input(<span class="string">'请输入2048游戏界面的大小：'</span>)</span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">'^[2-9][0-9]*$|^[1-9][0-9]+$'</span>, size):</span><br><span class="line">            size = int(size)</span><br><span class="line">            area = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(size)] <span class="keyword">for</span> j <span class="keyword">in</span> range(size)]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'输入有误！输入需满足大于等于2的数字\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> area</span><br></pre></td></tr></table></figure><hr><p>然后，通过随机给一个值为 0 的数组元素赋值 2 或 4，来模拟在界面上空白处随机生成一个数</p><ul><li><p><code>random.choice([2, 4])</code>     返回参数列表中随机的一个元素</p></li><li><p><code>[(j, i) for i in range(len(n[0])) for j in range(len(n)) if n[j][i] == 0]</code>表示</p><p>数组 n 中值为零的元素的位置元组所组成的列表</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_station</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    随机选择在值为零的数组位置上，随机赋值 2 或 4</span></span><br><span class="line"><span class="string">    :param n: “滑动”操作后的界面二维数组</span></span><br><span class="line"><span class="string">    :return:  随机赋值后的二维数组</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    values = random.choice([<span class="number">2</span>, <span class="number">4</span>])      </span><br><span class="line">    temp = [(j, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n[<span class="number">0</span>])) <span class="keyword">for</span> j <span class="keyword">in</span> range(len(n)) <span class="keyword">if</span> n[j][i] == <span class="number">0</span>]</span><br><span class="line">    temp_index = random.choice(temp)</span><br><span class="line">    n[temp_index[<span class="number">0</span>]][temp_index[<span class="number">1</span>]] = values</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><hr><p>这里先搞定 “滑动” 一维数组是怎样实现的，比如， [2, 0, 2, 8] 向左 “滑动” 后变为 [4, 8, 0, 0] 。之后把二维数组按照上下左右滑动的不同情况来对应分解成几个一维数组，遍历它们即可完成整个二维数组的 “滑动”</p><hr><p>先编写子函数来判断任意一个一维数组是否还可以“滑动”</p><ul><li><code>for i in range(len([])):print(&#39;Ok&#39;)</code> 这句语句不会输出内容，即不会进入该循环中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_next_equals</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    判断一维数组是否还可以“滑动”</span></span><br><span class="line"><span class="string">    :param n: 一维数组</span></span><br><span class="line"><span class="string">    :return: bool</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(n)</span><br><span class="line">    n = [i <span class="keyword">for</span> i <span class="keyword">in</span> n <span class="keyword">if</span> i !=<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n)):</span><br><span class="line">        <span class="keyword">if</span> len(n) &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span> &lt;= len(n) <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">if</span> n[i] == n[i+<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><hr><p>接下来，模拟一维数组的 “滑动”，注意，这里的滑动可能只完成部分，例如：[2, 2, 2, 2] –&gt; [4, 4, 0, 0] 。所以 “滑动” 后还需判断是否还可以 “滑动”，若可以则继续执行该函数，直至不可以继续 “滑动”。</p><ul><li>下面代码第13行处的 if 语句需注意，很容易遗漏，并且遗漏了程序运行也不会有异常抛出，因为当 num 为 0 时，n[num-1] 为 n[-1] ，表示列表的最后一个元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(n)</span>:</span>       </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    在一维数组上模拟从右到左的“滑动”</span></span><br><span class="line"><span class="string">    :param n: 一维数组, eg: [0, 2, 2, 2]</span></span><br><span class="line"><span class="string">    :return: “滑动”后的一维数组 [2, 4, 0, 0]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> len([i <span class="keyword">for</span> i <span class="keyword">in</span> n <span class="keyword">if</span> i != <span class="number">0</span>]) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> n <span class="keyword">if</span> i != <span class="number">0</span>] + [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n) - <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">if</span> len([i <span class="keyword">for</span> i <span class="keyword">in</span> n <span class="keyword">if</span> i != <span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(len(n)).__reversed__():  </span><br><span class="line">        <span class="keyword">if</span> num<span class="number">-1</span> &gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n[num<span class="number">-1</span>] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> n[num<span class="number">-1</span>] == n[num]:</span><br><span class="line">                    n[num<span class="number">-1</span>] = n[num<span class="number">-1</span>] + n[num<span class="number">-1</span>]</span><br><span class="line">                    <span class="keyword">if</span> num+<span class="number">1</span> &lt;= len(n)<span class="number">-1</span>:</span><br><span class="line">                        n[num:] = n[num+<span class="number">1</span>:] + [<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        n[num] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> n[num<span class="number">-1</span>] == <span class="number">0</span> <span class="keyword">and</span> num+<span class="number">1</span> &lt;= len(n)<span class="number">-1</span>:</span><br><span class="line">                n[num<span class="number">-1</span>] = n[num]</span><br><span class="line">                n[num:] = n[num+<span class="number">1</span>:] + [<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n[num<span class="number">-1</span>], n[num] = n[num], <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><hr><p>这时到了模拟滑动的动作，分上下左右四种滑动方式。首先实现向上滑动</p><ul><li><p><code>[[n[i][j] for i in range(len(n))] for j in range(len(n[0]))]</code>的作用是实现数组的转换：</p><p>eg:   [ [1, 2, 3], [4, 5, 6] ]  ——&gt;  [ [1,  4],  [2,  5],  [3,  6] ]</p></li><li><p><code>[[target_list[i][j] for i in range(len(target_list))] for j in range(len(target_list[0]))]</code>的作用是实现数组的转换：</p><p> eg:   [ [1,  4],  [2,  5],  [3,  6] ]  ——&gt;  [ [1, 2, 3], [4, 5, 6] ]</p></li><li><p>下面代码段第13行不能 i = i.reverse() ！！</p></li><li><p>必须先执行一次<code>i = move(i)</code>，然后再在<code>while is_next_equals(i):</code>循环里执行便可，这里是为了处理</p><p>只有一个非零值的那些一维数组，比如：[0,2,0]  、[0,0,4] 等等，这些在<code>is_next_equals(i)</code>里是返回<code>False</code>的</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up</span><span class="params">(n, *, flag = False)</span>:</span> </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    可看成一维数组从右往左的“滑动”</span></span><br><span class="line"><span class="string">    :param n: 一维数组</span></span><br><span class="line"><span class="string">    :param flag: </span></span><br><span class="line"><span class="string">    :return: list</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    target_list = []</span><br><span class="line">    temp_list = [[n[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n))] <span class="keyword">for</span> j <span class="keyword">in</span> range(len(n[<span class="number">0</span>]))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> temp_list:</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            i.reverse() </span><br><span class="line">        length = len(n)</span><br><span class="line">        i = move(i)</span><br><span class="line">        <span class="keyword">while</span> is_next_equals(i):</span><br><span class="line">            i = move(i)</span><br><span class="line">        i = i + [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(length - len(i))]</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            i.reverse()</span><br><span class="line">        target_list.append(i)</span><br><span class="line">    target_list = [[target_list[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(target_list))] <span class="keyword">for</span> j <span class="keyword">in</span> range(len(target_list[<span class="number">0</span>]))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> target_list</span><br></pre></td></tr></table></figure><p>向下滑动如下</p><ul><li>把数组上下倒置过来，便跟向上滑动的操作一模一样了，操作完后再把数组还原过来便行了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> up(n, flag=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>同理向左向右的滑动实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">right</span><span class="params">(n, *, flag=True)</span>:</span></span><br><span class="line">    target_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> n:</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            i.reverse()</span><br><span class="line">        length = len(n)</span><br><span class="line">        i = move(i)</span><br><span class="line">        <span class="keyword">while</span> is_next_equals(i):</span><br><span class="line">            i = move(i)</span><br><span class="line">        i = i + [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(length - len(i))]</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            i.reverse()</span><br><span class="line">        target_list.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> target_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> right(n, flag=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>判断游戏结束的代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_end</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> [n[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n)) <span class="keyword">for</span> j <span class="keyword">in</span> range(len(n)) <span class="keyword">if</span> n[i][j] == <span class="number">0</span>] == []:</span><br><span class="line">        print()</span><br><span class="line">        print(<span class="string">"the end!"</span>)</span><br><span class="line">        temp = input(<span class="string">'(r/R)重新开始游戏，(q/Q/其它)退出：'</span>)</span><br><span class="line">        <span class="keyword">if</span> temp == <span class="string">'r'</span> <span class="keyword">or</span> temp == <span class="string">'R'</span>:</span><br><span class="line">            main()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure><p>整合上下左右滑动的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    上下左右移动操作</span></span><br><span class="line"><span class="string">    :param n: 二维数组</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        flag = input(<span class="string">'(w/W)上，(s/S)下，(a/A)左，(d/D)右，(r/R)重置游戏大小，(q/Q)退出：'</span>)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'w'</span> <span class="keyword">or</span> flag == <span class="string">'W'</span>:       <span class="comment"># 上</span></span><br><span class="line">            n = up(n)</span><br><span class="line">            n = next_station(n)</span><br><span class="line">            print_area(n)</span><br><span class="line">            is_end(n)</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'s'</span> <span class="keyword">or</span> flag == <span class="string">'S'</span>:     <span class="comment"># 下</span></span><br><span class="line">            n = down(n)</span><br><span class="line">            n = next_station(n)</span><br><span class="line">            print_area(n)</span><br><span class="line">            is_end(n)</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'a'</span> <span class="keyword">or</span> flag == <span class="string">'A'</span>:     <span class="comment"># 左</span></span><br><span class="line">            n = left(n)</span><br><span class="line">            n = next_station(n)</span><br><span class="line">            print_area(n)</span><br><span class="line">            is_end(n)</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'d'</span> <span class="keyword">or</span> flag == <span class="string">'D'</span>:     <span class="comment"># 右</span></span><br><span class="line">            n = right(n)</span><br><span class="line">            n = next_station(n)</span><br><span class="line">            print_area(n)</span><br><span class="line">            is_end(n)</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'r'</span> <span class="keyword">or</span> flag == <span class="string">'R'</span>:     <span class="comment"># 重置游戏大小</span></span><br><span class="line">            main()</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'q'</span> <span class="keyword">or</span> flag == <span class="string">'Q'</span>:     <span class="comment"># 退出</span></span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'请输入正确的命令'</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输出数组函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_area</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> n:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure><p>最后程序入口处：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    init_area = area_array()</span><br><span class="line">    start_area = next_station(init_area)</span><br><span class="line">    <span class="keyword">for</span> values <span class="keyword">in</span> start_area:</span><br><span class="line">        print(values)</span><br><span class="line">    action(start_area)</span><br></pre></td></tr></table></figure><p>最后的最后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>大功告成。</p><hr><p>改进之处：</p><ol><li><p>在控制台上，每执行一个操作后就接着上一个输出结果来输出新的界面结果，不够美观</p></li><li><p>判断任意一个一维数组是否还可以“滑动”的函数和模拟一维数组 “滑动”的函数应该可以</p><p>用一个函数实现，并且减少一些循环次数</p></li><li><p>for循环输出数组时，当数字越来越大时，加上格式输出会更好点</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个很简陋的2048游戏设计
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="game" scheme="http://yoursite.com/categories/Python/game/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>超星尔雅视频如何后台播放</title>
    <link href="http://yoursite.com/2019/10/10/others/%E5%B0%94%E9%9B%85%E8%A7%86%E9%A2%91%E5%90%8E%E5%8F%B0%E6%92%AD%E6%94%BE/"/>
    <id>http://yoursite.com/2019/10/10/others/尔雅视频后台播放/</id>
    <published>2019-10-10T05:38:01.675Z</published>
    <updated>2019-10-10T13:54:53.446Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码有误" data-whm="Oh, these decrypted content cannot be verified">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="请输入密码：" />    <label for="hbePass">请输入密码：</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ab274ea8ed16229cd4a348333ecf8f0d3cc210d2aa868923dd9ec2e77db8ca5a">849abaa8f02083981ed20b87a8420380f2126863d7a1bed3c50e9e5251a76836d21302207905ec7d82eb7e0e2671ee18d6f048125f2235349eaef662b03b21ee5165d11682ddeafd783689f3c707de221710c9194b6ffea1c86d81f13763fc740b6c1a761a05531ccdf4c8ef5009aaaaa75f8c4d770847984be448af433a4ac9b1ef799adc38da1e6e2c8db070baeb2c49321f61742b84d6e5f8ef8eac0f62de827897cee8eecc557fc73d6d4ff8ec9643456b575d92a8ad8834fdc7af628fb0e0c732f3ede7252eefd84de6a44a4a72f67e23982addcc517b1c6853defabb03999fe4f167c204a81dc9fbb0e464a8f869c8c11ef70f9df055afccd7d4de39a27e33dc22c98f2120103dabe690a5cd37a75d392b07c0639e30a241d1fde6f92090a8503b2e75c2042a725900fcb16a5a1beed8ffd7878b4446371805efc1df55efc6b873f20630460443b3c0a50f155fed93905b44d849d37055b591320efdf65b9da832277c733ac5b9ba5b3ed9900623eadec958f482b91b73af7469ecaa647ca1bdb8fc81246ab787855b9c868834fec3d5e416fc17f243094ba0185bfebee1d70399aee0567f58fcdd95c382d5d01cf319dc526405a218639b82af3fcd4fd38a177fdeb528801a7123ad2e02a0f22f2acc288c568c96d19e76abc3a364f61a9f7cb8fc0fd441cd49f2bf33ed0f21445ed926abe6cde3d3199bd0643579a56126cb62594da297aacf45861ff669e317354245db6f35cf5ecbc5acc7cbd404013ac7493c59d7e29d2a0b8812ab9a364c123725bf5dbd90a084914aca4883daf77688967f86dd87c0cbbc8d7a39586f1b53079cf05769327dfe7f75d1251b50b7d94849dfbc926120a8f29aca395a16f462c3ae1d1ef669f0d3fd206d2e177cfa561fc11b8e384384783f26740b6457a08f0fccf7b530018c07e2816af960dd7c15a7bc0e792e36fcbc5250720abcf32b6e2485480534a8e08e164a7bbce508d3cc6732860a90f52656027fcd53355a13a5b8ecc479888d44dfe23161bf37e56b9f47e8dceaa6947e17cba039f6764278d0b2eb1c8e8b46eabc37f51249d12ed165c2f888b1ccb4d0c06f618bff19d6c025843d2ec2418eccd40cbddcc042e2f5044efb860d4169b9aea963deaa04afebde4513f1ede42f620ac619feda4599d497d36c9d117a758c7ef0a55c632d4813bd8861f59d67e031c672b7c6d87d8ae2c040a7562dd854e7a74d24e44fe827f3a009a18d78bccb8b38d6a01aeff8f397d15fb8e0a341906ea92cba3d520ae3e81b3623645d24a58455cc1edcde863729811926bff1fb77f808b4928d7d0cd093ffe69de83cfc34aa88bc0f4ca0381de50698431a15e22486516692c64ede7ac73238b78fc3a354cb176ed9c683783696388c8e286d3dbaca9696cfaa799aba97f6921ace8bdabd1bb4720c035e2c6d8121f5ea260a1632ed1cef554b9383fdf6ee78629221b0fab8e89a057a574e6460c5bb0f915c9a82c24d513095de6affba2e173b3efda8eadde5ca0e52702afb1134a416ad27eb474ad60dfc2fc667edb5a5de9d5cb8feda16ac3c0bb633ed0c516ac4516b10cf5b116762beb73073db48204573fc8036e02f3c2c0951c8cb3be7a99535f3f09bd71c00a2bf3c1400c37a69a986dfe3d98b736b51508fd00139abedb5861a35e83f2fc6971eee9ad89d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      文章已被加密, password is required to continue reading.
    
    </summary>
    
    
      <category term="电脑技巧" scheme="http://yoursite.com/categories/%E7%94%B5%E8%84%91%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/10/10/hello-world/"/>
    <id>http://yoursite.com/2019/10/10/hello-world/</id>
    <published>2019-10-10T05:08:35.077Z</published>
    <updated>2019-10-10T05:08:35.077Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
